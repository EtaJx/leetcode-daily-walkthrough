/**
 * 只出现一次的数字
 * 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素
 *
 * 要求：
 * 1. 具有线性时间复杂度
 * 2. 不实用额外空间
 *
 * 解：
 * 1. 使用XOR，按位异或运算符 ^
 * 2. 线性时间复杂度O(n)
 * 3. 不实用额外空间：空间复杂度O(1)，临时空间不随n的变化而变化
 *
 * 详解：
 * 按位异或运算符: ^
 * 1. 一个数和 0 做 XOR 运算等于本身：a⊕0 = a
 * 2. 一个数和其本身做 XOR 运算等于 0：a⊕a = 0
 * 3. XOR 运算满足交换律和结合律：a⊕b⊕a = (a⊕a)⊕b = 0⊕b = b
 */
const singleNumber = (arr: number[]): number => {
  /**
   * 通过reduce相当于把这个数组直接 异或 展开
   * a1 ^ a2 ^ a3 ^ ..... ^ an
   * 然后根据第三点 交换律 和 结合律
   * 在展开的这个表达式中，会将相同的两个数最终 异或 为0
   * 最后剩下的那个数，则为独一无二的那个数
   */
  return arr.reduce((prev: number, current: number): number => prev ^ current, 0);
};
